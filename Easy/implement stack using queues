typedef struct {
    int data;
    struct Node *next;
} Node;

typedef struct {
    Node *front;
    Node *rear;
} MyQueue;


typedef struct {
    MyQueue *q;
} MyStack;



MyQueue *myQueueCreate() {
    MyQueue *q = (MyQueue*)malloc(sizeof(MyQueue));
    q->front = q->rear = NULL;
    return q;
}

bool isEmpty(MyQueue* q) {
    return (q->front == NULL && q->rear == NULL);
}

void enqueue(MyQueue *q, int x) {
    Node *temp = (Node*)malloc(sizeof(Node));
    temp->data = x;
    temp->next = NULL;
    if (q->rear == NULL) {
        q->rear = q->front = temp;
    }
    else {
        q->rear->next = temp;
        q->rear = temp;
    }
}

int dequeue(MyQueue *q) {
    if (isEmpty(q)) {
        return -1;
    }

    int value = q->front->data;
    Node* temp = q->front;
    q->front = q->front->next;

    if (q->front == NULL) {
        q->rear = NULL;
    }
    free (temp);
    return value;
}

MyStack* myStackCreate() {
    MyStack *stack = (MyStack*)malloc(sizeof(MyStack));
    stack->q = myQueueCreate();
    return stack;
}

void myStackPush(MyStack* obj, int x) {
   if (isEmpty(obj->q)) {
    enqueue(obj->q, x);
    return;
   }
   enqueue(obj->q, x);
   Node *temp = obj->q->rear;
   while(obj->q->front != temp) {
        enqueue(obj->q, dequeue(obj->q));
   }
}

int myStackPop(MyStack* obj) {
    return dequeue(obj->q);
}

int myStackTop(MyStack* obj) {
    return obj->q->front->data;
}

bool myStackEmpty(MyStack* obj) {
    return isEmpty(obj->q);
}

void myStackFree(MyStack* obj) {
    free(obj->q);
    free(obj);
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/
